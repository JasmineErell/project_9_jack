/** Implements a 3x3 grid centered on the Hack screen (512x256 pixels). */
class Grid {
    field int x, y;      // Top-left corner of the grid
    field int cellSize;  // Size of each cell in the grid

    /** Constructs a new grid centered on the screen. */
    constructor Grid new(int aCellSize) {
        let cellSize = aCellSize;
        let x = (512 / 2) - (3 * cellSize / 2); // Center horizontally
        let y = (256 / 2) - (3 * cellSize / 2); // Center vertically
        return this;
    }

    /** Draws the 3x3 grid. */
    method void draw() {
        var int i, row, col;
        var int startX, startY, endX, endY;
        var int number;

        do Screen.setColor(true); // Set drawing color to black

        // Draw vertical lines
        let i = 0;
        while (i < 4) {
            let startX = x + (i * cellSize);
            let startY = y;
            let endX = startX;
            let endY = y + (3 * cellSize);
            do Screen.drawLine(startX, startY, endX, endY);
            let i = i + 1;
        }

        // Draw horizontal lines
        let i = 0;
        while (i < 4) {
            let startX = x;
            let startY = y + (i * cellSize);
            let endX = x + (3 * cellSize);
            let endY = startY;
            do Screen.drawLine(startX, startY, endX, endY);
            let i = i + 1;
        }

        // Draw numbers using Output API
        let number = 1; // Start numbering from 1
        let row = 0;
        while (row < 3) {
            let col = 0;
            while (col < 3) {
                do writeNumber(row, col, number);
                let number = number + 1;
                let col = col + 1;
            }
            let row = row + 1;
        }

        return;
    }

    /** Writes a number in the center of a grid cell using Output API. */
    method void writeNumber(int row, int col, int number) {
        var int cursorRow, cursorCol;

        // Calculate cursor position based on grid coordinates
        let cursorRow = ((y + (row * cellSize) + (cellSize / 2)) / 11); // Align to row grid
        let cursorCol = ((x + (col * cellSize) + (cellSize / 2)) / 8);  // Align to column grid

        do Output.moveCursor(cursorRow, cursorCol);
        do Output.printInt(number);

        return;
    }

    /** Grid cursor - a function that gets a value on the grid (from 1-9) and returns the x value. */
    method int getXValue(int number) {
        var int row, col;
        var int centerX;

        // Calculate row and column
        let row = (number - 1) / 3; // Integer division
        let col = (number - 1) - (row * 3); // Column without modulo

        // Calculate center X coordinate
        let centerX = x + (col * cellSize) + (cellSize / 2);

        return centerX;
    }

    /** Returns the y-coordinate of a cell given its number (1-9). */
    method int getYValue(int number) {
        var int row;
        var int centerY;

        // Calculate row
        let row = (number - 1) / 3;

        // Calculate center Y coordinate
        let centerY = y + (row * cellSize) + (cellSize / 2);

        return centerY;
    }

    /** Clears the number or text inside a specific cell (1-9). */
    method void clearCell(int number) {
        var int row, col;
        var int cursorRow, cursorCol;

        // Calculate row and column from the cell number
        let row = (number - 1) / 3;
        let col = (number - 1) - (row * 3);

        // Calculate cursor position based on grid coordinates
        let cursorRow = ((y + (row * cellSize) + (cellSize / 2)) / 11); // Align to row grid
        let cursorCol = ((x + (col * cellSize) + (cellSize / 2)) / 8);  // Align to column grid

        // Move cursor and print spaces to clear the cell
        do Output.moveCursor(cursorRow, cursorCol);
        do Output.printString(" "); // Print space to overwrite the number

        return;
    }

    /** Releases the grid object from memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}